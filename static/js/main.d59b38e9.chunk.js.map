{"version":3,"sources":["App/currencies.js","App/Form/Result/index.js","App/Form/Clock/index.js","App/Form/index.js","App.js","serviceWorker.js","index.js"],"names":["currencies","id","name","rate","Result","result","className","sourceAmount","toFixed","targetAmount","currency","Clock","useState","Date","time","setTime","useEffect","interval","setInterval","clearInterval","toLocaleString","undefined","weekday","day","month","hour","minute","second","Form","calculateResult","amount","setAmount","setCurrency","onSubmit","event","preventDefault","value","onChange","target","placeholder","type","step","required","map","key","App","setResult","find","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kTAAaA,EAAa,CACtB,CACIC,GAAI,MACJC,KAAM,yBACNC,KAAM,QAEV,CACIF,GAAI,MACJC,KAAM,OACNC,KAAM,QAEV,CACIF,GAAI,MACJC,KAAM,iBACNC,KAAM,QAEV,CACIF,GAAI,MACJC,KAAM,qBACNC,KAAM,UCDCC,G,MAfA,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACX,6BACOA,GACC,oCACI,0BAAMC,UAAU,gBACXD,EAAOE,aAAaC,QAAQ,GADjC,SAEI,0BAAMF,UAAU,yBACTD,EAAOI,cAAcD,QAAQ,GADpC,IACyCH,EAAOK,eC2BrDC,G,MApBD,WAAO,IAAD,EACQC,mBAAS,IAAIC,MADrB,mBACTC,EADS,KACHC,EADG,KAahB,OAVAC,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACzBH,EAAQ,IAAIF,QACb,KAEH,OAAO,WACHM,cAAcF,MAEnB,IAGC,yBAAKX,UAAU,SAAf,gBAC6BQ,EA5BrBM,oBACRC,EACA,CACIC,QAAS,OACTC,IAAK,UACLC,MAAO,OACPC,KAAM,UACNC,OAAQ,UACRC,OAAQ,eCqDLC,G,MA3DF,SAAC,GAA+B,IAA9BvB,EAA6B,EAA7BA,OAAQwB,EAAqB,EAArBA,gBAAqB,EACZjB,mBAAS,IADG,mBACjCkB,EADiC,KACzBC,EADyB,OAERnB,mBAASZ,EAAW,GAAGC,IAFf,mBAEjCS,EAFiC,KAEvBsB,EAFuB,KASxC,OACI,oCACI,kBAAC,EAAD,MACA,0BAAMC,SARO,SAACC,GAClBA,EAAMC,iBACNN,EAAgBC,EAAQpB,KAOhB,8BAAUJ,UAAU,QAChB,4BAAQA,UAAU,gBAAlB,qBACA,2BACI,+BACI,0BAAMA,UAAU,eAAhB,oBACA,2BACI8B,MAAON,EACPO,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBP,EAAUO,EAAOF,QAC3C9B,UAAU,cACViC,YAAY,wCACZC,KAAK,SACLC,KAAK,OACLC,UAAQ,MAIpB,2BACI,+BACI,0BAAMpC,UAAU,eAAhB,UACA,4BACI8B,MAAO1B,EACP2B,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBN,EAAYM,EAAOF,QAC7C9B,UAAU,eAETN,EAAW2C,KAAK,SAAAjC,GAAQ,OACrB,4BACIkC,IAAKlC,EAAST,GACdmC,MAAO1B,EAAST,IACfS,EAASR,YAM9B,2BACI,4BAAQI,UAAU,gBAAlB,aAIZ,kBAAC,EAAD,CACID,OAAQA,OC3BTwC,MA5Bf,WAAgB,IAAD,EACejC,qBADf,mBACNP,EADM,KACEyC,EADF,KAkBb,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,CACED,OAAQA,EACRwB,gBAnBkB,SAACC,EAAQpB,GAC/B,IAAMP,EAAOH,EACV+C,MAAK,qBAAG9C,KAAgBS,KACxBP,KACH6C,QAAQC,IAAI9C,GAEZ2C,EAAU,CACRvC,cAAeuB,EACfrB,aAAcqB,EAAS3B,EACvBO,kBCJcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.d59b38e9.chunk.js","sourcesContent":["export const currencies = [\r\n    {\r\n        id: \"USD\",\r\n        name: \"Dolar amerykański\",\r\n        rate: 3.9667,\r\n    },\r\n    {\r\n        id: \"EUR\",\r\n        name: \"Euro\",\r\n        rate: 4.4524,\r\n    },\r\n    {\r\n        id: \"GBP\",\r\n        name: \"Funt brytyjski\",\r\n        rate: 4.4524,\r\n    },\r\n    {\r\n        id: \"KRW\",\r\n        name: \"Won koreański\",\r\n        rate: 0.003269,\r\n    }\r\n]","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Result = ({ result }) => (\r\n    <p>\r\n        {!!result && (\r\n            <>\r\n                <span className=\"form__result\">\r\n                    {result.sourceAmount.toFixed(2)} PLN =\r\n                    <span className=\"form__result--value\">\r\n                        {(+result.targetAmount).toFixed(2)} {result.currency}\r\n                    </span>\r\n                </span>\r\n            </>\r\n        )}\r\n    </p>\r\n);\r\n\r\nexport default Result;","import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst formatDate = (date) => {\r\n    return date.toLocaleString(\r\n        undefined,\r\n        {\r\n            weekday: \"long\", \r\n            day: \"numeric\",\r\n            month: \"long\", \r\n            hour: \"2-digit\", \r\n            minute: \"2-digit\", \r\n            second: \"2-digit\"\r\n        }\r\n    )\r\n}\r\n\r\nconst Clock = () => {\r\n    const [time, setTime] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTime(new Date());\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"clock\">\r\n            Dzisiaj jest {formatDate(time)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Clock;","import React, { useState } from \"react\";\r\nimport { currencies } from \"../currencies\";\r\nimport Result from \"./Result\";\r\nimport Clock from \"./Clock\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({result, calculateResult}) => {\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [currency, setCurrency] = useState(currencies[0].id);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        calculateResult(amount, currency);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Clock />\r\n            <form onSubmit={onFormSubmit}>\r\n                <fieldset className=\"form\">\r\n                    <legend className=\"form__legend\">Przelicznik walut</legend>\r\n                    <p>\r\n                        <label>\r\n                            <span className=\"form__label\">Kwota w zł*</span>\r\n                            <input\r\n                                value={amount}\r\n                                onChange={({ target }) => setAmount(target.value)}\r\n                                className=\"form__field\"\r\n                                placeholder=\"Wpisz kwotę w złotówkach\"\r\n                                type=\"number\"\r\n                                step=\"0.01\"\r\n                                required\r\n                            />\r\n                        </label>\r\n                    </p>\r\n                    <p>\r\n                        <label>\r\n                            <span className=\"form__label\">Waluta</span>\r\n                            <select\r\n                                value={currency}\r\n                                onChange={({ target }) => setCurrency(target.value)}\r\n                                className=\"form__field\"\r\n                            >\r\n                                {currencies.map((currency => (\r\n                                    <option\r\n                                        key={currency.id}\r\n                                        value={currency.id}>\r\n                                        {currency.name}\r\n                                    </option>\r\n                                )))}\r\n                            </select>\r\n                        </label>\r\n                    </p>\r\n                    <p>\r\n                        <button className=\"form__button\">Oblicz</button>\r\n                    </p>\r\n                </fieldset>\r\n            </form>\r\n            <Result\r\n                result={result}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n\r\n","import React, { useState } from 'react';\nimport Form from \"./App/Form\";\nimport { currencies } from \"./App/currencies\";\n\nfunction App() {\n  const [result, setResult] = useState();\n\n  const calculateResult = (amount, currency) => {\n    const rate = currencies\n      .find(({ id }) => id === currency)\n      .rate;\n    console.log(rate);\n\n    setResult({\n      sourceAmount: +amount,\n      targetAmount: amount / rate,\n      currency,\n    });\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <Form\n        result={result}\n        calculateResult={calculateResult}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}